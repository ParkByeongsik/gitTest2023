[git브랜치를 운영하기 위한 전략]
1. gitflow
   1) main(master)브랜치
      => 실제 제품으로 나갈 수 있는 상태
      
   2) develop브랜치
      => 메인브랜치 기반으로 만들어진 브랜치
      => 다음 배포에 나갈 내용을 메인에서 머지할 수 없다.
         진행중인 개발내용이 머지될 브랜지
       
   3) feature브랜치
      => 각각의 개발자들이 자기 개발을 하기 위해서 만드는 브랜지
      => 어떤 개발하기 위해 사용하는 브랜치
      => 여기서 작업이 끝나면 develop브랜치에 머지
      
   4) release브랜치
      => 작업 완료되고 배포시점이 왔을때 develop브랜치를 기반으로 생성
      => QA나 여러가지 작업을 마무리 하고 main 브랜치와 머지
      
   5) hotfix브랜치
      => release브랜치를 기반으로 생성을하고 버그
         운영하는 중에 긴급하게 발생하는 오류나 이슈를 정리하는 브랜치
         이것도 메인브랜치와 머지
         
  [시나리오1]
    만약에 쇼핑몰을 배포하고 쇼핑몰에 클릭로그 분석하기, 추천시스템을 만들기
    - 메인브랜치를 기반으로 dev브랜치를 생성
    - dev브랜치를 기반으로 클릭로그를 분석하기 작업을 진행할 feature브랜치를 만들기
    - dev브랜치를 기반으로 추천시스템개발 작업을 진행할 feature브랜치를 만들기
    - 개발이 완료되면 dev브랜치에 머지
    - 배포하기 직전에 dev브랜치를 기반으로 release브랜치를 생성
    - release브랜치를 메인브랜치에 머지하면 끝
    
    
  [시나리오2]
    만약에 쇼핑몰을 배포하고 쇼핑몰에 클릭로그 분석하기, 추천시스템을 만들기를 하고 배포하기 직전 release브랜치를 만들었는데
    추천시스템을 만들기 위해서 구매내역도 같이 분석을 하기로 결정
    - release브랜치를 기반으로 추가된 기능을 개발하기 위한 feature브랜치를 만든다.
    - release브랜치가 배포하기 전의 내용을 담고 있는 브랜치이므로 추가작업이 끝나면 release브랜치와 머지
    - release브랜치를 메인브랜치와 머지 
    - !!!!!!! 메인브랜치에 추가된 내용을 반드시  dev브랜치와 sync를 맞추어야 한다.
    
      메인 -> dev브랜치 + 알파
     -----   --------
      로그인     로그인
      + 
      로그인히스토리
    
    
    
 2. github flow
    1) dev브랜치
       => main브랜치
    2) feature브랜치
       => 작업용브랜치
       
       
   ====> 모든 feature브랜치는 작업이 끝나고 pull request까지 완료되면 로컬저장소와 원격저장소 모두에서 지운다.    
    
    
    
    
    
    
    
    
    
    
    
    
    
         